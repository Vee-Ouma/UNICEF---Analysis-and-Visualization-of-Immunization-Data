## Create a variable with the value of your favorite number. Create another
## variable equal to the first variable, squared. Have the console print out
## whether or not the second variable is equal to ten.
fav = 5
another = fav ** 2
print(another == 10)
## 3. 1-Dimensional Arrays  ----------------------------------------------------
## Create a numeric vector five elements long.
## Lengthen it by three elements. Keep only the six elements in the middle.
vec <- c(3,4,5,7)
three_more <- c(8,9,10)
for (i in three_more){
vec <- c(vec,i)
}
vec <- vec[2:7]
print(vec)
## 4. Logic and Loops  ---------------------------------------------------------
## For each element of the vector created in question 3, create a loop that tests
## if that element is greater than 7.2. If it is, have the console print out your
## favorite movie quote. If it isn't, print the title of your favorite book.
for( i in vec){
if (c(i) > 7.2){
print('Favorite movie quote: I will be back')
}
else{
print('Favorire book: Gone with the wind')
}
}
## Expand the code above such that, if a number is less than 7.2 but greater than 2,
## the console prints out the title and artist of the last song you listened to.
## (Copy and paste your code so I can see both versions.)
for( i in vec){
if (c(i) < 7.2 && c(i) > 2){
print('Last song: Breathe , Artist : Embrz')
}
}
knitr::opts_chunk$set(echo = TRUE)
## 1. Basic data types ---------------------------------------------------------
## Divide five by three.
5/3
## Have the console print out a greeting.
print('Hello')
## Test the truth or falsity of three logical statements.
3 > 2
1 == 1.0
2 != (2.0 || 3)
## 2.Variables  ---------------------------------------------------------
## Create a variable with the value of your favorite number. Create another
## variable equal to the first variable, squared. Have the console print out
## whether or not the second variable is equal to ten.
fav = 5
another = fav ** 2
print(another == 10)
## 3. 1-Dimensional Arrays  ----------------------------------------------------
## Create a numeric vector five elements long.
## Lengthen it by three elements. Keep only the six elements in the middle.
vec <- c(3,4,5,7)
three_more <- c(8,9,10)
for (i in three_more){
vec <- c(vec,i)
}
vec <- vec[2:7]
print(vec)
## 4. Logic and Loops  ---------------------------------------------------------
## For each element of the vector created in question 3, create a loop that tests
## if that element is greater than 7.2. If it is, have the console print out your
## favorite movie quote. If it isn't, print the title of your favorite book.
for( i in vec){
if (c(i) > 7.2){
print('Favorite movie quote: I will be back')
}
else{
print('Favorire book: Gone with the wind')
}
}
## Expand the code above such that, if a number is less than 7.2 but greater than 2,
## the console prints out the title and artist of the last song you listened to.
## (Copy and paste your code so I can see both versions.)
for( i in vec){
if (c(i) < 7.2 && c(i) > 2){
print('Last song: Breathe , Artist : Embrz')
}
}
add_two <- function(number_1,number_2){
sum <- number_1 + number_2
return(sum)
}
add_two(1,2)
reverse <- function(number){
print(number)
digit = number%10
print(digit)
}
reverse <- function(number){
print(number)
digit <- number%10
print(digit)
}
reverse <- function(number){
print number
digit <- number%10
print digit
}
add_two <- function(number_1,number_2,square = FALSE){
sum <- number_1 + number_2
if (square == T){
sum = sum ** 2
}
return(sum)
}
add_two <- function(number_1,number_2,square = FALSE){
sum <- number_1 + number_2
if (square == T){
sum = sum ** 2
}
return(sum)
}
add_two(1,2)
add_two(1,2,T)
add_two(1,2,TRUE)
install.packages("data.table")
install.packages("car")
library(data.table)
library(car)
data("Salaries")
Salaries
class(Salaries)
class("Salaries")
class(Salaries)
Salaries
Salary_df <- data.table(Salaries)
Salary_df
Salaries
Salaries[]
Salaries[1]
Salary_df[1]
Salary_df[1:2]
Salary_df[1,2]
Salary_df,2]
Salary_df[,2]
Salary_df[1:5,2]
Salary_df[1:5,2:5]
Salary_df <- data.table(Salaries)
?Salaries
summary(Salaries)
Salary_df[2]
Salary_df[sex == "Female"]
Salary_df[sex == "Female" && salary > 5000]
Salary_df[sex == "Female" & salary > 5000]
Salary_df[,list(sex,rank)]
Salary_df[,rank]
Salary_df[,"rank"]
Salary_df[sex,rank]
Salary_df[,list(sex,rank,salary,salary_dup=salary)]
Salary_df[,list(sex,rank,salary,salary_mean=mean(salary)]
Salary_df[,list(sex,rank,salary,salary_mean=mean(salary))]
Salary_df[,list(gender = sex,rank)]
Salary_df[,salary_mean := mean(salary)]
Salary_df
class(Salary_df)
mean(Salary_df.salary)
mean(Salary_df$salary)
Salary_df[,list(sex,salary_mean = mean(salary)),by= list(sex)]
Salary_df[,list(count= .N),by= list(rank)]
Salary_df[,list(count= .N, mean_salary=mean(salary)),by= list(rank,sex)]
library(data.table)
library(car)
library(wong)
library(Wong)
library(car.Wong)
library(car.wong)
library("Wong")
install.packages(car.wong)
install.packages(car.Wong)
install.packages(Wong)
install.packages("Wong")
c('dog',5,T,7)
C(3,5,12,4,15,32,9,12)
this_vector <- C(3,5,12,4,15,32,9,12)
this_vector <- C(3,5,12,4,15,32,9)
this_vector <- C(3,5,12,4,15,32,9,12)
this_vector <- c(3,5,12,4,15,32,9,12)
this_vector[5]
c(this_vector,7)
this_vector
20:30
seq(20,30,1)
rep(20,30,1)
rep(20:30,1)
4<3|5==2+3
this_variable <- 'goodbye'
if (this_variable != "goodbye"){
print(12)
}else{
print(24)
}
i<- 1
while(i<20){print("test")}
library(data.table)
library(car)
data("Salaries")
data.table("Salaries")
Salaries
salaries <- data.table(Salaries)
salaries
Salaries[rank=="Prof"]
salaries[rank == "Prof"]
salaries[rank == "Prof",]
salaries[rank == "Prof",,]
salaries[,mean.salary := mean(salary), by = list(rank)]
salaries
salaries[, list(mean.service=mean(yrs.service)), by=list(sex)]
salaries
salaries[, list(rank, yrs.since.phd)]
salaries
salaries <- salaries[, yrs.service:=NULL]
salaries
salaries <- data.table(Salaries)
salaries
Salaries <- data.table(Salaries)
Salaries[, yrs.service:=NULL]
Salaries
Salaries[4:35,]
Salaries[,4:35]
Salaries[4:35,list(sex,discipline)]
##############################################################################
## Problem Set 2: Data Manipulation
## Author: Amelia Bertozzi-Villa
## Description: Most instructions require you to write code. When I ask a
##              direct question please write a brief response in a comment.
##
##              Comment your code according to the guidelines discussed in
##              class.
##
##              You can get up to one additional point for the extra credit
##              sections.
##############################################################################
# this command *clears your environment* so you start with a fresh slate every time you run the script:
rm(list=ls())
## Section 1: Loading Libraries ---------------------------------------------------------
## Load the "data.table" and "vcd" libraries.
## You'll have to install the "vcd" package first if you haven't already, but *do not* include this in your script!
library(data.table)
library(vcd)
## ---------------------------------------------------------------------------------
## Section 2: Loading Data  ---------------------------------------------------------
## Load the "Suicide" dataset. Read through the documentation for this dataset with "?Suicide"
Suicide
?Suicide     ##This dataset has Data from Heuer (1979) on suicide rates in West Germany classified by age, sex, and method of suicide. It has 306 observations and 6 variables
## Convert the "Suicide" dataset into a data.table. Remember to *assign* it to an object named "Suicide"!
Suicide<-data.table(Suicide)
## What does one line of this dataset represent? Look back at the "What is Data Science" lecture if you need a hint.
## NOTE: please type your response IN A COMMENT so it doesn't get executed as code. To comment out a block of text,
## Select it and hit Cmd-Shift-C.
## ------------------------------------------------------------------------------------
## Section 3: data.table : i  ----------------------------------------------------
## Note: NONE OF THESE COMMANDS should change the original dataset "Suicide". You're just
## printing subsets of the dataset to the screen.
## Isolate the 7th row of the dataset.
Suicide[7]
## Isolate rows 3-15 of the dataset.
Suicide[3:15,,]
## Isolate all the rows where method is equal to "poison".
Suicide[method=="poison"]
## Isolate all the rows where sex is equal to "male" and method is equal to "drown".
Suicide[sex=="male"&&method=="drown"]
## ------------------------------------------------------------------------------------
## Section 4: data.table : j  ----------------------------------------------------
## Isolate the column "sex".
Suicide[,sex]
Suicide[,list(sex)]
Suicide$sex
## Isolate the columns "Freq" and "age".
Suicide[,list(Freq,age)]
## Isolate rows 200-215 AND columns "sex" and "method".
Suicide[200:215,list(sex,method)]
## Delete the "method2" and "age.group" columns from your dataset.
## NOTE: This WILL change the dataset.
Suicide[,method2:=NULL]
Suicide[,age.group:=NULL]
## ------------------------------------------------------------------------------------
## Section 5: data.table : by  ----------------------------------------------------
## Aggregate the dataset down to the total number (e.g. the "sum") of suicides, BY method. Do *not* assign this output to an object name.
Suicide[,list(sum=sum(suicides)),by=list(method)]
## Create a *new column* called "mean.freq", equal to the mean frequency of suicide, BY method and sex.
## By "create" here, I mean that you should *update* the dataset such that when you print out "Suicide", you see the new column name.
Suicide[,mean.freq:=mean(Freq, by=list(method&&sex))]
## Delete the column "mean.freq".
Suicide[,mean.freq := NULL]
## ------------------------------------------------------------------------------------
## Section 6: Contemplation -----------------------------------------------------
## You've just been working with a dataset of suicides. We've been treating them like they're just
## any old numbers. Is this an appropriate method of working with this dataset? How do you, as a newfangled
## data scientist, feel about needing to work with depressing or sensitive information?
## Again, please write your response as a comment.
## I truly appreciate this questions. While I don't usually look at data simply as numbers, I forgot to pay attention to the sensititvity of this data set in the joy of learning to code.
##
## ------------------------------------------------------------------------------------
## EXTRA CREDIT 1: Merging  ---------------------------------------------------------
## Run the code below to generate a new dataset with the frequency of suicides in neighboring East Germany:
Suicide.east <- Suicide[, list(sex, age, method, Freq.east=as.double(sample(1:1500, nrow(Suicide), replace=T)))]
## Run the code below to rename the "Freq" column of "Suicide" to make it clear that you're talking about western Germany
setnames(Suicide, "Freq", "Freq.west")
## Merge "Suicide" and "Suicide.east" to a new object called "all.suicide".
## The result should have the same number of rows as either "Suicide" or Suicide.east".
suicide.all<-merge(Suicide,Suicide.east)
## If you rerun the command above, but with the argument "all" set to true, do you get a different result? Why or why not?
suicide.all<-merge(Suicide,Suicide.east,all=TRUE)
## You get the same result as the default value of the all parameter is TRUE. Mentioning it explicitly as T or TRUE would not change the result.
## ------------------------------------------------------------------------------------
## EXTRA CREDIT 2: Reshaping -----------------------------------------------------
## Melt the "suicide.all" dataset so that the "Freq.west" and "Freq.east" columns are collapsed into a single column.
## Save the result of this operation to a new dataset called "melted.suicide".
melted.suicide <- melt(suicide.all, id.vars = c("sex", "method", "age"),
measure.vars = c("Freq.east", "Freq.west"),
value.name="Freq",
variable.name="Freq.type")
## Cast the "melted.suicide" dataset so that there is a column for each sex, which contains the death count for that sex.
dcast.data.table(comas_melted, id + days + duration + sex + age + age_at_eval + observations ~ iq_type,
value.var = "iq")
dcast.data.table(melted.suicide, )
rm(list=ls())
library(data.table)
library(vcd)
install.packages(vcd)
install.packages('vcd')
library(data.table)
library(vcd)
Suicide
?Suicide
Suicide
Suicide<-data.table(Suicide)
Suicide[7]
Suicide
Suicide[0]
Suicide[1]
Suicide[3:15,,]
Suicide[method=="poison"]
Suicide[sex=="male"&&method=="drown"]
Suicide[method=="poison"]
Suicide[sex=="male"&&method=="drown"]
Suicide[sex=="male" && method =="drown"]
Suicide[sex=="male" & method =="drown"]
Suicide[,sex]
Suicide[,list(sex)]
Suicide$sex
Suicide[,list(Freq,age)]
Suicide[,sex]
Suicide[,list(sex)]
Suicide$sex
Suicide[200:215,list(sex,method)]
Suicide[,method2:=NULL]
Suicide[,age.group:=NULL]
Suicide[,method2:=NULL]
Suicide[,age.group:=NULL]
Suicide[,method2:=NULL]
Suicide[,age.group:=NULL]
Suicide[7]
Suicide[,list(sum=sum(suicides)),by=list(method)]
Suicide[,mean.freq:=mean(Freq, by=list(method&&sex))]
Suicide[,mean.freq:=mean(Freq, by=list(method & sex))]
Suicide
## Isolate rows 200-215 AND columns "sex" and "method".
Suicide[200:215,list(sex,method)]
## Delete the "method2" and "age.group" columns from your dataset.
## NOTE: This WILL change the dataset.
Suicide[,method2:=NULL]
Suicide[,age.group:=NULL]
## ------------------------------------------------------------------------------------
## Section 5: data.table : by  ----------------------------------------------------
## Aggregate the dataset down to the total number (e.g. the "sum") of suicides, BY method. Do *no
Suicide[,mean.freq:=mean(Freq, by=list(method && sex))]
Suicide
Suicide[,mean.freq:=mean(Freq, by=list(method & sex))]
Suicide
Suicide[,mean.freq := NULL]
Suicide.east <- Suicide[, list(sex, age, method, Freq.east=as.double(sample(1:1500, nrow(Suicide), replace=T)))]
Suicide.east
setnames(Suicide, "Freq", "Freq.west")
melted.suicide <- melt(suicide.all, id.vars = c("sex", "method", "age"),
measure.vars = c("Freq.east", "Freq.west"),
value.name="Freq",
variable.name="Freq.type")
dcast.data.table(comas_melted, id + days + duration + sex + age + age_at_eval + observations ~ iq_type,
value.var = "iq")
dcast.data.table(melted.suicide, )
dcast.data.table(melted.suicide, )
melted.suicide
melted.suicide <- melt(suicide.all, id.vars = c("sex", "method", "age"),
measure.vars = c("Freq.east", "Freq.west"),
value.name="Freq",
variable.name="Freq.type")
suicide.all
melted.suicide <- melt(Suicide.all, id.vars = c("sex", "method", "age"),
measure.vars = c("Freq.east", "Freq.west"),
value.name="Freq",
variable.name="Freq.type")
suicide.all<-merge(Suicide,Suicide.east)
suicide.all<-merge(Suicide,Suicide.east,all=TRUE)
melted.suicide <- melt(suicide.all, id.vars = c("sex", "method", "age"),
measure.vars = c("Freq.east", "Freq.west"),
value.name="Freq",
variable.name="Freq.type")
dcast.data.table(comas_melted, id + days + duration + sex + age + age_at_eval + observations ~ iq_type,
value.var = "iq")
dcast.data.table(melted.suicide, )
library(data.table)
library(vcd)
Suicide
?Suicide
Suicide<-data.table(Suicide)
Suicide[7]
Suicide[3:15,,]
library(Suicide)
load(Suicide)
data("Suicide")
Suicide<-data.table(Suicide)
Suicide[7]
library("Suicide")
library(Suicide)
data(Suicide)
?Suicide
Suicide<-data.table(Suicide)
Suicide
Suicide[,mean.freq:=mean(Freq, by=list(method&&sex))]
Suicide
Suicide[,mean.freq:=mean(Freq, by=list(method & sex))]
Suicide
melted.suicide
dcast.data.table(comas_melted, id + days + duration + sex + age + age_at_eval + observations ~ iq_type,
value.var = "iq")
dcast(melted.suicide, sex ~ Freq)
reshape_done<- dcast(melted.suicide, sex ~ Freq)
reshape_done
melted.suicide[0]
melted.suicide[1]
reshape_done[1]
reshape_done<- dcast(melted.suicide, sex + Freq ~ variable)
melted.suicide
reshape_done<- dcast(melted.suicide, male + female ~ Freq)
reshape_done[1]
reshape_done<- dcast(melted.suicide, male + female ~ Freq)
rm(list=ls())
library(data.table)
library(vcd)
Suicide
?Suicide     ##This dataset has Data from Heuer (1979) on suicide rates in West Germany classified by age, sex, and method of suicide. It has 306 observations and 6 variables
Suicide<-data.table(Suicide)
Suicide
rm(list=ls())
## Section 1: Loading Libraries ---------------------------------------------------------
## Load the "data.table" and "vcd" libraries.
## You'll have to install the "vcd" package first if you haven't already, but *do not* include this in your script!
library(data.table)
library(vcd)
## ---------------------------------------------------------------------------------
## Section 2: Loading Data  ---------------------------------------------------------
## Load the "Suicide" dataset. Read through the documentation for this dataset with "?Suicide"
data(Suicide)
?Suicide
## Convert the "Suicide" dataset into a data.table. Remember to *assign* it to an object named "Suicide"!
Suicide<-data.table(Suicide)
Suicide[7]
## Isolate rows 3-15 of the dataset.
Suicide[3:15,,]
## Isolate all the rows where method is equal to "poison".
Suicide[method=="poison"]
## Isolate all the rows where sex is equal to "male" and method is equal to "drown".
Suicide[sex=="male" & method =="drown"]
Suicide[,list(sex)]
## Isolate the columns "Freq" and "age".
Suicide[,list(Freq,age)]
## Isolate rows 200-215 AND columns "sex" and "method".
Suicide[200:215,list(sex,method)]
Suicide[,method2:=NULL]
Suicide[,age.group:=NULL]
Suicide.east <- Suicide[, list(sex, age, method, Freq.east=as.double(sample(1:1500, nrow(Suicide), replace=T)))]
## Run the code below to rename the "Freq" column of "Suicide" to make it clear that you're talking about western Germany
setnames(Suicide, "Freq", "Freq.west")
suicide.all<-merge(Suicide,Suicide.east)
## If you rerun the command above, but with the argument "all" set to true, do you get a different result? Why or why not?
suicide.all<-merge(Suicide,Suicide.east,all=TRUE)
melted.suicide <- melt(suicide.all, id.vars = c("sex", "method", "age"),
measure.vars = c("Freq.east", "Freq.west"),
value.name="Freq",
variable.name="Freq.type")
casted_melted.suicide <- dcast.data.table(melted.suicide,  sex+method+age+Freq.type+Freq ~ sex, value)
casted_melted.suicide <- dcast.data.table(melted.suicide,  sex+method+age+Freq.type+Freq ~ sex, value.var = "Freq")
casted_melted.suicide
install.packages("haven")
setwd("C:\Users\sneha\Documents\GitHub\Unicef")
setwd("C:/Users/sneha/Documents/GitHub/Unicef")
library(haven)
setwd("C:/Users/sneha/Documents/GitHub/Unicef/Congo data")
library(haven)
my.data <- read_spss("ch.sav")
ch.data <- read_spss("ch.sav")
ch.data
view(ch.data)
ch.data
ch.data <- data.table(ch.data)
ch.data <- data.table(ch.data)
library(data)
library(data.table)
ch.data <- data.table(ch.data)
ch.data
ch.data[0]
ch.data[1]
View(ch.data)
View(ch.data)
write.csv(ch.data, file = "ch.csv")
write.csv(ch.data, file = "ch.csv",row.names=FALSE, na="")
